name: Build BOSH Release (golang-1-linux vendored)
description: Build a BOSH release tarball with vendored golang-1-linux and a rootfs blob

inputs:
  stack:
    description: Stack name (e.g., cflinuxfs5)
    required: true
  version:
    description: Version number for the rootfs (e.g., 1.0.0-rc.1)
    required: true
  release-repo:
    description: GitHub org/repo for the BOSH release (e.g., cloudfoundry/cflinuxfs5-release)
    required: true
  bosh-cli-version:
    description: Version of bosh-cli to install
    required: false
    default: "7.4.0"
  go-version:
    description: Go version to vendor as a blob under golang-1-linux (e.g., 1.24.6)
    required: false
    default: "1.24.6"
  golang-release-ref:
    description: Git ref (tag/branch/commit) of bosh-package-golang-release to vendor from
    required: false
    default: "main"

outputs:
  release-tarball:
    description: Path to the generated BOSH release tarball
    value: ${{ steps.build.outputs.release-tarball }}

runs:
  using: "composite"
  steps:
    - name: Install prerequisites
      shell: bash
      run: |
        set -euo pipefail
        sudo apt-get update -y
        sudo apt-get install -y curl wget git jq

    - name: Install bosh CLI
      shell: bash
      run: |
        set -euo pipefail
        VERSION="${{ inputs.bosh-cli-version }}"
        wget -O /tmp/bosh "https://github.com/cloudfoundry/bosh-cli/releases/download/v${VERSION}/bosh-cli-${VERSION}-linux-amd64"
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Build BOSH release
      id: build
      shell: bash
      run: |
        set -euo pipefail
        STACK="${{ inputs.stack }}"
        VERSION="${{ inputs.version }}"
        RELEASE_REPO="${{ inputs.release-repo }}"
        GO_VERSION="${{ inputs.go-version }}"
        GOLANG_REF="${{ inputs.golang-release-ref }}"

        # Clone the release repo
        git clone "https://github.com/${RELEASE_REPO}" release-repo
        cd release-repo

        # Clone bosh-package-golang-release
        git clone --depth 1 --branch "${GOLANG_REF}" https://github.com/cloudfoundry/bosh-package-golang-release ../bosh-package-golang-release

        # Vendor golang-1-linux into this release
        bosh vendor-package golang-1-linux ../bosh-package-golang-release

        # Ensure Go blob exists
        GO_BLOB_DIR="blobs/golang-1-linux"
        GO_BLOB_FILE="go${GO_VERSION}.linux-amd64.tar.gz"
        mkdir -p "${GO_BLOB_DIR}"

        if [ ! -f "${GO_BLOB_DIR}/${GO_BLOB_FILE}" ]; then
          echo "Downloading Go ${GO_VERSION} blob from go.dev..."
          curl -L "https://go.dev/dl/${GO_BLOB_FILE}" -o "${GO_BLOB_DIR}/${GO_BLOB_FILE}"
          bosh add-blob "${GO_BLOB_DIR}/${GO_BLOB_FILE}" "golang-1-linux/${GO_BLOB_FILE}"
        else
          echo "Go blob already present: ${GO_BLOB_DIR}/${GO_BLOB_FILE}"
        fi

        # Copy the rootfs tarball into blobs
        mkdir -p blobs/rootfs
        cp ../rootfs-artifacts/${STACK}-${VERSION}.tar.gz blobs/rootfs/cflinuxfs5.tar.gz

        # Register it as a blob
        bosh add-blob blobs/rootfs/${STACK}-${VERSION}.tar.gz rootfs/cflinuxfs5.tar.gz

        # Sync blobs to update config/blobs.yml
        bosh sync-blobs

        # Create a proper BOSH release tarball
        bosh create-release --tarball ../rootfs-artifacts/${STACK}-release-${VERSION}.tgz --force

        echo "release-tarball=../rootfs-artifacts/${STACK}-release-${VERSION}.tgz" >> $GITHUB_OUTPUT
