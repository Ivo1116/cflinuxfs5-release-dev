name: "Bump Golang Package"
description: "Vendors the latest golang package from bosh-package-golang-release into a BOSH release repo"
inputs:
  git_user_name:
    description: "Git user name for commits"
    required: true
  git_user_email:
    description: "Git user email for commits"
    required: true
  packages:
    description: "JSON array of packages to vendor (e.g. [\"golang-1-linux\"])"
    required: true
  packages_to_remove:
    description: "JSON array of packages to remove"
    required: false
    default: "[]"
  private_yml:
    description: "YAML string for config/private.yml"
    required: true
  release_dir:
    description: "Subdirectory of the release repo (if not root)"
    required: false
    default: ""
  cflinuxfs_release_repo:
    description: "GitHub repo (owner/repo) for the BOSH release"
    required: true
  cflinuxfs_release_ref:
    description: "Git ref for the BOSH release"
    required: false
    default: "main"
  golang_release_repo:
    description: "GitHub repo (owner/repo) for bosh-package-golang-release"
    required: true
  golang_release_ref:
    description: "Git ref for bosh-package-golang-release"
    required: false
    default: "main"
  github_token:
    description: "GitHub token with push access"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout BOSH release repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.cflinuxfs_release_repo }}
        ref: ${{ inputs.cflinuxfs_release_ref }}
        token: ${{ inputs.github_token }}
        path: release-repo

    - name: Checkout bosh-package-golang-release
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.golang_release_repo }}
        ref: ${{ inputs.golang_release_ref }}
        token: ${{ inputs.github_token }}
        path: golang-release

    - name: Set up Git
      shell: bash
      run: |
        git config --global user.name "${{ inputs.git_user_name }}"
        git config --global user.email "${{ inputs.git_user_email }}"

    - name: Install BOSH CLI
      shell: bash
      run: |
        wget -qO- https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64 > /usr/local/bin/bosh
        chmod +x /usr/local/bin/bosh

    - name: Ensure release-repo/config/final.yml has name
      shell: bash
      run: |
        mkdir -p release-repo/config
        printf "name: cflinuxfs5-release\n" > release-repo/config/final.yml
        echo "=== release-repo/config/final.yml ==="
        cat -A release-repo/config/final.yml

    - name: Bump Golang Package
      shell: bash
      run: |
        set -euo pipefail

        CFLINUXFS5_RELEASE_PATH="release-repo"
        GOLANG_RELEASE_PATH="golang-release"
        GIT_USER_NAME="${{ inputs.git_user_name }}"
        GIT_USER_EMAIL="${{ inputs.git_user_email }}"
        PACKAGES='${{ inputs.packages }}'
        PACKAGES_TO_REMOVE='${{ inputs.packages_to_remove }}'
        PRIVATE_YML="${{ inputs.private_yml }}"
        RELEASE_DIR="${{ inputs.release_dir }}"

        cd "$CFLINUXFS5_RELEASE_PATH/$RELEASE_DIR"

        git config user.name "$GIT_USER_NAME"
        git config user.email "$GIT_USER_EMAIL"

        for package_to_remove in $(echo "$PACKAGES_TO_REMOVE" | jq -r '.[]'); do
          rm -rf "packages/$package_to_remove"
        done

        echo "$PRIVATE_YML" >config/private.yml

        for package in $(echo "$PACKAGES" | jq -r '.[]'); do
          bosh vendor-package "$package" "$GOLANG_RELEASE_PATH"
        done

        if [ -z "$(git status --porcelain)" ]; then
          echo "No changes to commit."
          exit 0
        fi

        git add -A

        package_list=$(echo "$PACKAGES" | jq -r 'join(", ")')
        first_package=$(echo "$PACKAGES" | jq -r '.[0]')
        first_version=$(cat "$GOLANG_RELEASE_PATH/packages/$first_package/version")
        git commit -m "Update $package_list packages to $first_version from golang-release

Removed: $(echo "$PACKAGES_TO_REMOVE" | jq -r '. | join(", ")')"

    - name: Push changes
      shell: bash
      run: |
        cd release-repo
        git push origin HEAD:${{ inputs.cflinuxfs_release_ref }}
