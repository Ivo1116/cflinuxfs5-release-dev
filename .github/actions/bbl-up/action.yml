name: 'BBL Up'
description: 'Set up test environment using BBL (GCP)'

inputs:
  stack:
    description: 'Stack name'
    required: true
  version:
    description: 'Version number'
    required: true
  env_name:
    description: 'Environment name'
    required: false
    default: 'cflinuxfs5-test'
  gcp_project_id:
    description: 'GCP Project ID'
    required: true
  gcp_zone:
    description: 'GCP Zone'
    required: false
    default: 'us-east1-c'
  gcp_region:
    description: 'GCP Region'
    required: false
    default: 'us-east1'
  lb_domain:
    description: 'Load balancer domain'
    required: false
    default: ''
  bbl_state_repo:
    description: 'Repo for BBL state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch for BBL state'
    required: false
    default: 'main'
  max_retries:
    description: 'Maximum number of retries for BBL up'
    required: false
    default: '3'

outputs:
  success:
    description: 'Whether BBL up succeeded'
    value: ${{ steps.bbl-up.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Checkout cf-deployment-concourse-tasks
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment-concourse-tasks
        ref: main
        path: cf-deployment-concourse-tasks

    - name: Checkout bosh-deployment
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/bosh-deployment
        ref: master
        path: bosh-deployment

    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        path: bbl-state
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}

    - name: Install BBL, Terraform, BOSH CLI
      shell: bash
      run: |
        set -euo pipefail
        wget -O /tmp/bbl https://github.com/Ivo1116/bosh-bootloader/releases/download/test/bbl-linux
        chmod +x /tmp/bbl
        sudo mv /tmp/bbl /usr/local/bin/bbl

        wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip /tmp/terraform.zip -d /tmp/
        sudo mv /tmp/terraform /usr/local/bin/terraform

        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Set up GCP credentials
      shell: bash
      run: |
        # Set up gcloud CLI for additional operations
        echo "${{ env.GCP_SERVICE_ACCOUNT_KEY }}" | base64 -d > /tmp/gcp-key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project ${{ inputs.gcp_project_id }}

    - name: Clean up any existing failed resources
      shell: bash
      run: |
        set +e  # Don't fail if resources don't exist
        
        # Clean up any existing resources that might cause conflicts
        ENV_PREFIX="vm-"
        INSTANCES=$(gcloud compute instances list --filter="name~'${ENV_PREFIX}.*jumpbox'" --format="value(name,zone)" 2>/dev/null || true)
        
        if [[ -n "$INSTANCES" ]]; then
          echo "Found existing jumpbox instances, cleaning up..."
          while IFS=$'\t' read -r name zone; do
            if [[ -n "$name" && -n "$zone" ]]; then
              echo "Deleting instance: $name in zone: $zone"
              gcloud compute instances delete "$name" --zone="$zone" --quiet || true
            fi
          done <<< "$INSTANCES"
          
          # Wait a bit for cleanup to complete
          sleep 30
        fi

    - name: Run BBL Up with retry logic
      id: bbl-up
      shell: bash
      env:
        GCP_SERVICE_ACCOUNT_KEY: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}
        CFLINUXFS5_LB_CERT: ${{ env.CFLINUXFS5_LB_CERT }}
        CFLINUXFS5_LB_KEY: ${{ env.CFLINUXFS5_LB_KEY }}
      run: |
        set -euo pipefail

        export PATH="/usr/local/bin:$PATH"

        mkdir -p bbl-state/${{ inputs.env_name }}
        cd bbl-state/${{ inputs.env_name }}

        # Write GCP service account key to file
        echo "${GCP_SERVICE_ACCOUNT_KEY}" > gcp-key.json

        export BBL_GCP_SERVICE_ACCOUNT_KEY="$(pwd)/gcp-key.json"
        export BBL_GCP_PROJECT_ID="${{ inputs.gcp_project_id }}"
        export BBL_GCP_ZONE="${{ inputs.gcp_zone }}"
        export BBL_GCP_REGION="${{ inputs.gcp_region }}"
        export BBL_IAAS=gcp

        if [[ -n "${CFLINUXFS5_LB_CERT:-}" && -n "${CFLINUXFS5_LB_KEY:-}" ]]; then
          echo "${CFLINUXFS5_LB_CERT}" > lb-cert.pem
          echo "${CFLINUXFS5_LB_KEY}" > lb-key.pem
          export BBL_LB_CERT="$(pwd)/lb-cert.pem"
          export BBL_LB_KEY="$(pwd)/lb-key.pem"
        fi

        if [[ -n "${{ inputs.lb_domain }}" ]]; then
          export LB_DOMAIN="${{ inputs.lb_domain }}"
        fi

        # Retry logic for BBL up
        max_retries=${{ inputs.max_retries }}
        retry_count=0
        success=false

        while [[ $retry_count -lt $max_retries ]]; do
          echo "BBL up attempt $((retry_count + 1)) of $max_retries"
          
          if bbl up --debug \
            --terraform-binary /usr/local/bin/terraform \
            ${BBL_LB_CERT:+--lb-cert "$BBL_LB_CERT"} \
            ${BBL_LB_KEY:+--lb-key "$BBL_LB_KEY"} \
            ${LB_DOMAIN:+--lb-domain "$LB_DOMAIN"}; then
            success=true
            break
          else
            retry_count=$((retry_count + 1))
            if [[ $retry_count -lt $max_retries ]]; then
              echo "BBL up failed, cleaning up and retrying in 60 seconds..."
              
              # Clean up failed deployment
              bbl destroy --no-confirm --debug || echo "Destroy failed or nothing to destroy"
              
              # Wait before retry
              sleep 60
            else
              echo "All BBL up attempts failed"
            fi
          fi
        done

        if [[ "$success" = "true" ]]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "BBL up completed successfully"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "BBL up failed after $max_retries attempts"
          exit 1
        fi

    - name: Verify environment health
      shell: bash
      run: |
        cd bbl-state/${{ inputs.env_name }}
        
        # Verify BBL environment is working
        echo "Verifying BBL environment..."
        bbl print-env
        
        # Test jumpbox connectivity
        echo "Testing jumpbox connectivity..."
        eval "$(bbl print-env)"
        
        # Extract jumpbox key and test SSH
        bosh int vars/jumpbox-deployment-vars.yml --path /jumpbox_ssh/private_key > jumpbox.key
        chmod 600 jumpbox.key
        
        jumpbox_ip=$(bbl outputs | grep jumpbox_url | cut -d' ' -f2 | cut -d':' -f1)
        
        # Test SSH with timeout
        timeout 30 ssh -i jumpbox.key -o StrictHostKeyChecking=no -o ConnectTimeout=10 jumpbox@${jumpbox_ip} 'echo "Jumpbox SSH test successful"' || {
          echo "Warning: Jumpbox SSH test failed, but continuing..."
        }

    - name: Commit and push BBL state
      if: steps.bbl-up.outputs.success == 'true'
      shell: bash
      run: |
        set -euo pipefail
        cd bbl-state
        git config user.name "CF Buildpacks Eng Bot"
        git config user.email "tanzu-buildpacks.pdl@broadcom.com"
        
        echo "*/gcp-key.json" >> .gitignore
        echo "*/service-account-key.json" >> .gitignore
        echo "*/*-key.json" >> .gitignore
        echo "*/vars/*-vars-store.yml" >> .gitignore
        
        if [[ -n "$(git status --porcelain)" ]]; then
          git add -A
          git commit -m "Update BBL state for ${{ inputs.env_name }}"
          git push origin ${{ inputs.bbl_state_branch }}
        else
          echo "No BBL state changes to commit."
        fi

    - name: Output BBL environment info
      if: steps.bbl-up.outputs.success == 'true'
      shell: bash
      run: |
        cd bbl-state/${{ inputs.env_name }}
        echo "BBL Environment Information:"
        bbl print-env
        echo "BBL Outputs:"
        bbl outputs
