name: 'BBL Up'
description: 'Set up test environment using BBL - simplified for testing'

inputs:
  stack:
    description: 'Stack name'
    required: true
  version:
    description: 'Version number'
    required: true
  env_name:
    description: 'Environment name'
    required: false
    default: 'cflinuxfs5-test'
  gcp_project_id:
    description: 'GCP Project ID'
    required: false
    default: 'cf-buildpacks'
  gcp_zone:
    description: 'GCP Zone'
    required: false
    default: 'us-east1-c'
  gcp_region:
    description: 'GCP Region'
    required: false
    default: 'us-east1'
  lb_domain:
    description: 'Load balancer domain'
    required: false
    default: 'cflinuxfs5-test.local'

outputs:
  success:
    description: 'Whether BBL up succeeded'
    value: ${{ steps.bbl-up.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Checkout cf-deployment-concourse-tasks
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment-concourse-tasks
        ref: main
        path: cf-deployment-concourse-tasks

    - name: Checkout bosh-deployment
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/bosh-deployment
        ref: master
        path: bosh-deployment

    - name: Create local BBL state directory
      shell: bash
      run: |
        mkdir -p bbl-state/${{ inputs.env_name }}
        cd bbl-state/${{ inputs.env_name }}
        # Create minimal state files that BBL expects
        echo '{"version":1,"iaas":"gcp"}' > bbl-state.json
        echo '{}' > vars.yml
        echo "Created local BBL state directory: bbl-state/${{ inputs.env_name }}"

    - name: Install BBL and dependencies
      shell: bash
      run: |
        # Install BBL
        echo "Installing BBL..."
        wget -O /tmp/bbl https://github.com/cloudfoundry/bosh-bootloader/releases/download/v8.4.110/bbl-v8.4.110_linux_x86-64
        chmod +x /tmp/bbl
        sudo mv /tmp/bbl /usr/local/bin/bbl

        # Install Terraform
        echo "Installing Terraform..."
        wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip /tmp/terraform.zip -d /tmp/
        sudo mv /tmp/terraform /usr/local/bin/terraform

        # Install BOSH CLI
        echo "Installing BOSH CLI..."
        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Verify installations
      shell: bash
      run: |
        echo "Verifying installations..."
        echo "BBL version: $(bbl --version)"
        echo "Terraform version: $(terraform --version)"
        echo "BOSH version: $(bosh --version)"

    - name: Test BBL up (dry run)
      id: bbl-up
      shell: bash
      run: |
        set -euo pipefail

        # Navigate to the correct directory
        if [ ! -d "bbl-state/${{ inputs.env_name }}" ]; then
          echo "ERROR: bbl-state/${{ inputs.env_name }} directory not found"
          ls -la bbl-state/
          exit 1
        fi

        cd bbl-state/${{ inputs.env_name }}
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la

        # For testing, we'll just validate that BBL can run
        echo "Testing BBL help command..."
        bbl help > /dev/null
        
        # In a real implementation, this would be:
        # export BBL_GCP_SERVICE_ACCOUNT_KEY='${{ env.GCP_SERVICE_ACCOUNT_KEY }}'
        # export BBL_GCP_PROJECT_ID='${{ inputs.gcp_project_id }}'
        # export BBL_GCP_ZONE='${{ inputs.gcp_zone }}'
        # export BBL_GCP_REGION='${{ inputs.gcp_region }}'
        # export BBL_IAAS=gcp
        # bbl up --dry-run  # or actual bbl up with proper credentials
        
        echo "success=true" >> $GITHUB_OUTPUT
        echo "BBL up test completed successfully"

    - name: Skip DNS and commit (for testing)
      shell: bash
      run: |
        echo "=== SKIPPING DNS SETUP AND COMMIT FOR TESTING ==="
        echo "In a real environment, this would add DNS records and commit state"
