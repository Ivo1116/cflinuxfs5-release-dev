name: 'BBL Up'
description: 'Set up test environment using BBL (GCP)'

inputs:
  stack:
    description: 'Stack name'
    required: true
  version:
    description: 'Version number'
    required: true
  env_name:
    description: 'Environment name'
    required: false
    default: 'cflinuxfs5-test'
  gcp_project_id:
    description: 'GCP Project ID'
    required: true
  gcp_zone:
    description: 'GCP Zone'
    required: false
    default: 'us-east1-c'
  gcp_region:
    description: 'GCP Region'
    required: false
    default: 'us-east1'
  lb_domain:
    description: 'Load balancer domain'
    required: false
    default: ''
  bbl_state_repo:
    description: 'Repo for BBL state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch for BBL state'
    required: false
    default: 'main'

outputs:
  success:
    description: 'Whether BBL up succeeded'
    value: ${{ steps.bbl-up.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Checkout cf-deployment-concourse-tasks
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment-concourse-tasks
        ref: main
        path: cf-deployment-concourse-tasks

    - name: Checkout bosh-deployment
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/bosh-deployment
        ref: master
        path: bosh-deployment

    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        path: bbl-state
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}

    - name: Install BBL, Terraform, BOSH CLI
      shell: bash
      run: |
        set -euo pipefail
        
        wget -O /tmp/bbl https://github.com/Ivo1116/bosh-bootloader/releases/download/test/bbl-linux
        chmod +x /tmp/bbl
        sudo mv /tmp/bbl /usr/local/bin/bbl

        wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip /tmp/terraform.zip -d /tmp/
        chmod +x /tmp/terraform
        sudo mv /tmp/terraform /usr/local/bin/terraform

        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh
        
        bbl version
        terraform version
        bosh --version

    - name: Run BBL Up
      id: bbl-up
      shell: bash
      env:
        GCP_SERVICE_ACCOUNT_KEY: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}
        CFLINUXFS5_LB_CERT: ${{ env.CFLINUXFS5_LB_CERT }}
        CFLINUXFS5_LB_KEY: ${{ env.CFLINUXFS5_LB_KEY }}
      run: |
        set -euo pipefail

        export PATH="/usr/local/bin:$PATH"

        mkdir -p bbl-state/${{ inputs.env_name }}
        cd bbl-state/${{ inputs.env_name }}

        # Validate required environment variables
        if [[ -z "${GCP_SERVICE_ACCOUNT_KEY:-}" ]]; then
          echo "Error: GCP_SERVICE_ACCOUNT_KEY is required"
          exit 1
        fi

        echo "${GCP_SERVICE_ACCOUNT_KEY}" > gcp-key.json
        chmod 600 gcp-key.json

        if ! jq empty gcp-key.json 2>/dev/null; then
          echo "Error: GCP_SERVICE_ACCOUNT_KEY is not valid JSON"
          rm -f gcp-key.json
          exit 1
        fi

        export BBL_GCP_SERVICE_ACCOUNT_KEY="$(pwd)/gcp-key.json"
        export BBL_GCP_PROJECT_ID="${{ inputs.gcp_project_id }}"
        export BBL_GCP_ZONE="${{ inputs.gcp_zone }}"
        export BBL_GCP_REGION="${{ inputs.gcp_region }}"
        export BBL_IAAS=gcp

        if [[ -n "${CFLINUXFS5_LB_CERT:-}" && -n "${CFLINUXFS5_LB_KEY:-}" ]]; then
          echo "${CFLINUXFS5_LB_CERT}" > lb-cert.pem
          echo "${CFLINUXFS5_LB_KEY}" > lb-key.pem
          chmod 600 lb-cert.pem lb-key.pem
          export BBL_LB_CERT="$(pwd)/lb-cert.pem"
          export BBL_LB_KEY="$(pwd)/lb-key.pem"
        fi

        if [[ -n "${{ inputs.lb_domain }}" ]]; then
          export LB_DOMAIN="${{ inputs.lb_domain }}"
        fi

        max_attempts=3
        attempt=1
        success=false

        while [[ $attempt -le $max_attempts ]]; do
          echo "BBL up attempt $attempt of $max_attempts"
          
          if bbl up --debug \
            --terraform-binary /usr/local/bin/terraform \
            ${BBL_LB_CERT:+--lb-cert "$BBL_LB_CERT"} \
            ${BBL_LB_KEY:+--lb-key "$BBL_LB_KEY"} \
            ${LB_DOMAIN:+--lb-domain "$LB_DOMAIN"}; then
            success=true
            break
          else
            echo "BBL up attempt $attempt failed"
            if [[ $attempt -lt $max_attempts ]]; then
              echo "Cleaning up and retrying in 60 seconds..."
              bbl destroy --no-confirm --debug || echo "Nothing to destroy"
              sleep 60
            fi
            ((attempt++))
          fi
        done

        if [[ "$success" == "true" ]]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "BBL up completed successfully"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "BBL up failed after $max_attempts attempts"
          exit 1
        fi

        rm -f gcp-key.json lb-cert.pem lb-key.pem

    - name: Validate BBL environment
      if: steps.bbl-up.outputs.success == 'true'
      shell: bash
      run: |
        cd bbl-state/${{ inputs.env_name }}
        
        # Validate BBL environment is working
        echo "Validating BBL environment..."
        if ! bbl print-env >/dev/null; then
          echo "Error: BBL environment validation failed"
          exit 1
        fi
        
        if ! bbl outputs >/dev/null; then
          echo "Error: BBL outputs not available"
          exit 1
        fi
        
        echo "BBL environment validation successful"

    - name: Commit and push BBL state
      if: steps.bbl-up.outputs.success == 'true'
      shell: bash
      run: |
        set -euo pipefail
        cd bbl-state
        git config user.name "CF Buildpacks Eng Bot"
        git config user.email "tanzu-buildpacks.pdl@broadcom.com"
        
        echo "*/gcp-key.json" >> .gitignore
        echo "*/service-account-key.json" >> .gitignore
        echo "*/*-key.json" >> .gitignore
        echo "*/vars/*-vars-store.yml" >> .gitignore
        
        if [[ -n "$(git status --porcelain)" ]]; then
          git add -A
          git commit -m "Update BBL state for ${{ inputs.env_name }}"
          git push origin ${{ inputs.bbl_state_branch }}
        else
          echo "No BBL state changes to commit."
        fi

    - name: Output BBL environment info
      if: steps.bbl-up.outputs.success == 'true'
      shell: bash
      run: |
        cd bbl-state/${{ inputs.env_name }}
        echo "=== BBL Environment Information ==="
        bbl print-env
        echo ""
        echo "=== BBL Outputs ==="
        bbl outputs
