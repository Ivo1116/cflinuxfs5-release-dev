name: 'BBL Up'
description: 'Set up test environment using BBL (GCP)'

inputs:
  stack:
    description: 'Stack name'
    required: true
  version:
    description: 'Version number'
    required: true
  env_name:
    description: 'Environment name'
    required: false
    default: 'cflinuxfs5-test'
  gcp_project_id:
    description: 'GCP Project ID'
    required: true
  gcp_zone:
    description: 'GCP Zone'
    required: false
    default: 'us-east1-c'
  gcp_region:
    description: 'GCP Region'
    required: false
    default: 'us-east1'
  lb_domain:
    description: 'Load balancer domain'
    required: false
    default: ''
  bbl_state_repo:
    description: 'Repo for BBL state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch for BBL state'
    required: false
    default: 'main'

runs:
  using: 'composite'
  steps:
    - name: Checkout cf-deployment-concourse-tasks
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment-concourse-tasks
        ref: main
        path: cf-deployment-concourse-tasks

    - name: Checkout bosh-deployment
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/bosh-deployment
        ref: master
        path: bosh-deployment

    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        path: bbl-state
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}

    - name: Install BBL, Terraform, BOSH CLI
      shell: bash
      run: |
        set -euo pipefail
        wget -O /tmp/bbl https://github.com/Ivo1116/bosh-bootloader/releases/download/test/bbl-linux
        chmod +x /tmp/bbl
        sudo mv /tmp/bbl /usr/local/bin/bbl

        wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip /tmp/terraform.zip -d /tmp/
        sudo mv /tmp/terraform /usr/local/bin/terraform
        sudo chmod +x /usr/local/bin/terraform

        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Create BOSH director ops files
      shell: bash
      run: |
        mkdir -p bbl-state/${{ inputs.env_name }}/ops
        
        # Direct download ops file (avoids SOCKS5 proxy issues)
        cat > bbl-state/${{ inputs.env_name }}/ops/director-direct-download.yml << 'EOF'
        - type: replace
          path: /releases/name=bosh?
          value:
            name: bosh
            version: "282.0.4"
            url: file:///tmp/bosh-282.0.4.tgz
            sha1: 20c8f5c7b16ab89c4b9a91748e3ad0b0e6c0cbf9

        - type: replace
          path: /instance_groups/name=bosh/jobs/name=bosh/properties/director/pre_start_script?
          value: |
            #!/bin/bash
            set -euo pipefail
            echo "Pre-downloading BOSH release..."
            if [ ! -f /tmp/bosh-282.0.4.tgz ]; then
              for attempt in 1 2 3; do
                echo "Download attempt $attempt/3"
                if curl -L --connect-timeout 30 --max-time 300 --retry 3 \
                   -o /tmp/bosh-282.0.4.tgz \
                   https://github.com/cloudfoundry/bosh/releases/download/v282.0.4/bosh-282.0.4.tgz; then
                  echo "Successfully downloaded BOSH release"
                  break
                else
                  echo "Download attempt $attempt failed"
                  if [ $attempt -eq 3 ]; then
                    echo "All download attempts failed"
                    exit 1
                  fi
                  sleep 30
                fi
              done
              
              echo "Verifying download..."
              if echo "20c8f5c7b16ab89c4b9a91748e3ad0b0e6c0cbf9  /tmp/bosh-282.0.4.tgz" | sha1sum -c; then
                echo "BOSH release verification successful"
              else
                echo "SHA1 verification failed"
                rm -f /tmp/bosh-282.0.4.tgz
                exit 1
              fi
            fi

        - type: replace
          path: /instance_groups/name=bosh/properties/director/timeout?
          value: 1800

        - type: replace
          path: /instance_groups/name=bosh/properties/director/max_threads?
          value: 4

        - type: replace
          path: /instance_groups/name=bosh/properties/director/log_level?
          value: debug
        EOF

        # Fallback ops file (SOCKS5 with extended timeouts)
        cat > bbl-state/${{ inputs.env_name }}/ops/director-fallback.yml << 'EOF'
        - type: replace
          path: /releases/name=bosh?
          value:
            name: bosh
            version: "282.0.4"
            url: https://github.com/cloudfoundry/bosh/releases/download/v282.0.4/bosh-282.0.4.tgz
            sha1: 20c8f5c7b16ab89c4b9a91748e3ad0b0e6c0cbf9

        - type: replace
          path: /instance_groups/name=bosh/properties/director/timeout?
          value: 3600

        - type: replace
          path: /instance_groups/name=bosh/properties/director/max_threads?
          value: 2

        - type: replace
          path: /instance_groups/name=bosh/properties/director/log_level?
          value: debug

        - type: replace
          path: /instance_groups/name=bosh/properties/director/connection_options?
          value:
            timeout: 600
            ssh_timeout: 120
            socks5_timeout: 600
        EOF

    - name: Run BBL Up
      id: bbl-up
      shell: bash
      env:
        GCP_SERVICE_ACCOUNT_KEY: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}
        CFLINUXFS5_LB_CERT: ${{ env.CFLINUXFS5_LB_CERT }}
        CFLINUXFS5_LB_KEY: ${{ env.CFLINUXFS5_LB_KEY }}
      run: |
        set -euo pipefail

        mkdir -p bbl-state/${{ inputs.env_name }}
        cd bbl-state/${{ inputs.env_name }}

        # Setup GCP credentials
        echo "${GCP_SERVICE_ACCOUNT_KEY}" > gcp-key.json
        export BBL_GCP_SERVICE_ACCOUNT_KEY="$(pwd)/gcp-key.json"
        export BBL_GCP_PROJECT_ID="${{ inputs.gcp_project_id }}"
        export BBL_GCP_ZONE="${{ inputs.gcp_zone }}"
        export BBL_GCP_REGION="${{ inputs.gcp_region }}"
        export BBL_IAAS=gcp

        # Clean proxy environment
        unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY ALL_PROXY

        # Set timeouts
        export BOSH_CLIENT_TIMEOUT=600
        export BOSH_DEPLOYMENT_TIMEOUT=3600

        # Setup LB cert/key if provided
        if [[ -n "${CFLINUXFS5_LB_CERT:-}" && -n "${CFLINUXFS5_LB_KEY:-}" ]]; then
          echo "${CFLINUXFS5_LB_CERT}" > lb-cert.pem
          echo "${CFLINUXFS5_LB_KEY}" > lb-key.pem
          export BBL_LB_CERT="$(pwd)/lb-cert.pem"
          export BBL_LB_KEY="$(pwd)/lb-key.pem"
        fi

        # Setup LB domain if provided
        if [[ -n "${{ inputs.lb_domain }}" ]]; then
          export LB_DOMAIN="${{ inputs.lb_domain }}"
        fi

        # Test jumpbox readiness
        test_jumpbox_ready() {
          local max_attempts=30
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Testing jumpbox readiness (attempt $attempt/$max_attempts)..."
            
            if JUMPBOX_ADDRESS=$(bbl jumpbox-address 2>/dev/null) && [[ -n "$JUMPBOX_ADDRESS" ]]; then
              JUMPBOX_IP=$(echo "$JUMPBOX_ADDRESS" | cut -d: -f1)
              
              if timeout 20 nc -z "$JUMPBOX_IP" 22 2>/dev/null; then
                if bbl ssh-key > /tmp/jumpbox_ssh_key 2>/dev/null; then
                  chmod 600 /tmp/jumpbox_ssh_key
                  
                  if timeout 30 ssh -i /tmp/jumpbox_ssh_key \
                    -o StrictHostKeyChecking=no \
                    -o UserKnownHostsFile=/dev/null \
                    -o ConnectTimeout=15 \
                    -o BatchMode=yes \
                    jumpbox@"$JUMPBOX_IP" \
                    'echo "Ready" && curl -s --connect-timeout 10 --max-time 20 https://github.com/ >/dev/null' 2>/dev/null; then
                    echo "Jumpbox is ready"
                    rm -f /tmp/jumpbox_ssh_key
                    return 0
                  fi
                  rm -f /tmp/jumpbox_ssh_key
                fi
              fi
            fi
            
            sleep 10
            attempt=$((attempt + 1))
          done
          
          echo "Jumpbox readiness test failed"
          return 1
        }

        # BBL up function
        run_bbl_up() {
          local ops_file="$1"
          echo "Running BBL up with ops file: $ops_file"
          
          bbl up --debug \
            --ops-file "ops/$ops_file" \
            --terraform-binary /usr/local/bin/terraform \
            ${BBL_LB_CERT:+--lb-cert "$BBL_LB_CERT"} \
            ${BBL_LB_KEY:+--lb-key "$BBL_LB_KEY"} \
            ${LB_DOMAIN:+--lb-domain "$LB_DOMAIN"}
        }

        # Check if infrastructure already exists
        if [ -f bbl-state.json ] && bbl jumpbox-address >/dev/null 2>&1; then
          echo "Infrastructure exists, checking jumpbox and attempting director creation..."
          if test_jumpbox_ready; then
            # Try direct download first
            if run_bbl_up "director-direct-download.yml"; then
              echo "Director creation succeeded with direct download"
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            elif run_bbl_up "director-fallback.yml"; then
              echo "Director creation succeeded with fallback"
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
        fi

        # Full BBL up with retry
        for attempt in 1 2 3; do
          echo "BBL up attempt $attempt/3"
          
          # Try direct download approach first
          if run_bbl_up "director-direct-download.yml"; then
            echo "BBL up succeeded with direct download on attempt $attempt"
            echo "success=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Try fallback approach
          if run_bbl_up "director-fallback.yml"; then
            echo "BBL up succeeded with fallback on attempt $attempt"
            echo "success=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Attempt $attempt failed"
          if [ $attempt -lt 3 ]; then
            echo "Waiting 60 seconds before retry..."
            # Test jumpbox if it exists
            if bbl jumpbox-address >/dev/null 2>&1; then
              test_jumpbox_ready || true
            fi
            sleep 60
          fi
        done

        echo "All BBL up attempts failed"
        exit 1

    - name: Commit and push BBL state
      shell: bash
      run: |
        set -euo pipefail
        cd bbl-state
        git config user.name "CF Buildpacks Eng Bot"
        git config user.email "tanzu-buildpacks.pdl@broadcom.com"
        if [[ -n "$(git status --porcelain)" ]]; then
          git add -A
          git commit -m "Update BBL state for ${{ inputs.env_name }}"
          git push origin ${{ inputs.bbl_state_branch }}
        else
          echo "No BBL state changes to commit."
        fi

    - name: Output BBL environment info
      shell: bash
      run: |
        cd bbl-state/${{ inputs.env_name }}
        bbl print-env
