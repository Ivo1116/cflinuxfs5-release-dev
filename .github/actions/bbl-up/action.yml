name: 'BBL Up'
description: 'Set up test environment using BBL (GCP)'

inputs:
  stack:
    description: 'Stack name'
    required: true
  version:
    description: 'Version number'
    required: true
  env_name:
    description: 'Environment name'
    required: false
    default: 'cflinuxfs5-test'
  gcp_project_id:
    description: 'GCP Project ID'
    required: true
  gcp_zone:
    description: 'GCP Zone'
    required: false
    default: 'us-east1-c'
  gcp_region:
    description: 'GCP Region'
    required: false
    default: 'us-east1'
  lb_domain:
    description: 'Load balancer domain'
    required: false
    default: ''
  bbl_state_repo:
    description: 'Repo for BBL state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch for BBL state'
    required: false
    default: 'main'

runs:
  using: 'composite'
  steps:
    - name: Checkout cf-deployment-concourse-tasks
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment-concourse-tasks
        ref: main
        path: cf-deployment-concourse-tasks

    - name: Checkout bosh-deployment
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/bosh-deployment
        ref: master
        path: bosh-deployment

    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        path: bbl-state
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}

    - name: Install BBL, Terraform, BOSH CLI
      shell: bash
      run: |
        set -euo pipefail
        wget -O /tmp/bbl https://github.com/Ivo1116/bosh-bootloader/releases/download/test/bbl-linux
        chmod +x /tmp/bbl
        sudo mv /tmp/bbl /usr/local/bin/bbl

        wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip /tmp/terraform.zip -d /tmp/
        sudo mv /tmp/terraform /usr/local/bin/terraform
        sudo chmod +x /usr/local/bin/terraform
        export PATH=$PATH:/usr/local/bin
        terraform version

        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Run BBL Up
      id: bbl-up
      shell: bash
      env:
        GCP_SERVICE_ACCOUNT_KEY: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}
        CFLINUXFS5_LB_CERT: ${{ env.CFLINUXFS5_LB_CERT }}
        CFLINUXFS5_LB_KEY: ${{ env.CFLINUXFS5_LB_KEY }}
      run: |
        set -euo pipefail

        mkdir -p bbl-state/${{ inputs.env_name }}
        cd bbl-state/${{ inputs.env_name }}

        # Write GCP service account key to file
        echo "${GCP_SERVICE_ACCOUNT_KEY}" > gcp-key.json

        export BBL_GCP_SERVICE_ACCOUNT_KEY="$(pwd)/gcp-key.json"
        export BBL_GCP_PROJECT_ID="${{ inputs.gcp_project_id }}"
        export BBL_GCP_ZONE="${{ inputs.gcp_zone }}"
        export BBL_GCP_REGION="${{ inputs.gcp_region }}"
        export BBL_IAAS=gcp

        # Ensure no proxy environment variables interfere
        unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY ALL_PROXY

        # Set longer timeout for BOSH operations
        export BOSH_CLIENT_TIMEOUT=600
        export BOSH_DEPLOYMENT_TIMEOUT=3600

        # Optional: set LB cert/key if provided
        if [[ -n "${CFLINUXFS5_LB_CERT:-}" && -n "${CFLINUXFS5_LB_KEY:-}" ]]; then
          echo "${CFLINUXFS5_LB_CERT}" > lb-cert.pem
          echo "${CFLINUXFS5_LB_KEY}" > lb-key.pem
          export BBL_LB_CERT="$(pwd)/lb-cert.pem"
          export BBL_LB_KEY="$(pwd)/lb-key.pem"
        fi

        # Optional: set LB domain if provided
        if [[ -n "${{ inputs.lb_domain }}" ]]; then
          export LB_DOMAIN="${{ inputs.lb_domain }}"
        fi

        # Function to test jumpbox connectivity
        test_jumpbox_connectivity() {
          local jumpbox_ip="$1"
          local ssh_key="$2"
          local max_attempts=30
          local attempt=1
          
          echo "Testing jumpbox connectivity to $jumpbox_ip"
          
          while [ $attempt -le $max_attempts ]; do
            echo "Connectivity test attempt $attempt of $max_attempts"
            
            if timeout 10 ssh -i "$ssh_key" \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=10 \
              -o BatchMode=yes \
              jumpbox@"$jumpbox_ip" \
              "echo 'Jumpbox is ready'" 2>/dev/null; then
              echo "Jumpbox is accessible and ready"
              return 0
            fi
            
            echo "Jumpbox not ready yet, waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          echo "Jumpbox connectivity test failed after $max_attempts attempts"
          return 1
        }

        # Function to prepare jumpbox for SOCKS5 proxy
        prepare_jumpbox() {
          local jumpbox_ip="$1"
          local ssh_key="$2"
          
          echo "Preparing jumpbox for SOCKS5 proxy usage"
          
          # Configure SSH for better stability
          ssh -i "$ssh_key" \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o ConnectTimeout=30 \
            jumpbox@"$jumpbox_ip" << 'EOF'
        # Update SSH configuration for stability
        sudo sed -i 's/#ClientAliveInterval 0/ClientAliveInterval 60/' /etc/ssh/sshd_config
        sudo sed -i 's/#ClientAliveCountMax 3/ClientAliveCountMax 10/' /etc/ssh/sshd_config
        sudo sed -i 's/#TCPKeepAlive yes/TCPKeepAlive yes/' /etc/ssh/sshd_config
        sudo systemctl restart ssh

        # Ensure good connectivity
        curl -s --connect-timeout 10 https://s3.amazonaws.com/ > /dev/null || echo "Direct S3 connectivity test failed"
        EOF
        }

        # Run BBL up with enhanced error handling
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "BBL up attempt $attempt of $max_attempts"
          
          # First, try to create infrastructure without director
          if ! bbl up --debug \
            --terraform-binary /usr/local/bin/terraform \
            --no-director \
            ${BBL_LB_CERT:+--lb-cert "$BBL_LB_CERT"} \
            ${BBL_LB_KEY:+--lb-key "$BBL_LB_KEY"} \
            ${LB_DOMAIN:+--lb-domain "$LB_DOMAIN"}; then
            echo "Infrastructure creation failed on attempt $attempt"
            if [ $attempt -eq $max_attempts ]; then
              echo "All infrastructure creation attempts failed"
              exit 1
            fi
            attempt=$((attempt + 1))
            sleep 30
            continue
          fi
          
          echo "Infrastructure created successfully, testing jumpbox..."
          
          # Get jumpbox details
          JUMPBOX_IP=$(bbl jumpbox-address | cut -d: -f1)
          bbl ssh-key > jumpbox_ssh_key
          chmod 600 jumpbox_ssh_key
          
          # Test jumpbox connectivity
          if ! test_jumpbox_connectivity "$JUMPBOX_IP" "jumpbox_ssh_key"; then
            echo "Jumpbox connectivity test failed on attempt $attempt"
            if [ $attempt -eq $max_attempts ]; then
              echo "All jumpbox connectivity tests failed"
              exit 1
            fi
            attempt=$((attempt + 1))
            sleep 30
            continue
          fi
          
          # Prepare jumpbox
          if ! prepare_jumpbox "$JUMPBOX_IP" "jumpbox_ssh_key"; then
            echo "Jumpbox preparation failed on attempt $attempt"
            if [ $attempt -eq $max_attempts ]; then
              echo "All jumpbox preparation attempts failed"
              exit 1
            fi
            attempt=$((attempt + 1))
            sleep 30
            continue
          fi
          
          echo "Jumpbox is ready, creating BOSH director..."
          sleep 10  # Give jumpbox a moment to settle
          
          # Now create the director
          if bbl up --debug \
            --terraform-binary /usr/local/bin/terraform \
            ${BBL_LB_CERT:+--lb-cert "$BBL_LB_CERT"} \
            ${BBL_LB_KEY:+--lb-key "$BBL_LB_KEY"} \
            ${LB_DOMAIN:+--lb-domain "$LB_DOMAIN"}; then
            echo "BBL up succeeded on attempt $attempt"
            break
          else
            echo "BOSH director creation failed on attempt $attempt"
            if [ $attempt -eq $max_attempts ]; then
              echo "All BOSH director creation attempts failed"
              exit 1
            fi
            attempt=$((attempt + 1))
            sleep 60
          fi
        done

        # Clean up temporary files
        rm -f jumpbox_ssh_key

        echo "success=true" >> $GITHUB_OUTPUT

    - name: Commit and push BBL state
      shell: bash
      run: |
        set -euo pipefail
        cd bbl-state
        git config user.name "CF Buildpacks Eng Bot"
        git config user.email "tanzu-buildpacks.pdl@broadcom.com"
        if [[ -n "$(git status --porcelain)" ]]; then
          git add -A
          git commit -m "Update BBL state for ${{ inputs.env_name }}"
          git push origin ${{ inputs.bbl_state_branch }}
        else
          echo "No BBL state changes to commit."
        fi

    - name: Output BBL environment info
      shell: bash
      run: |
        cd bbl-state/${{ inputs.env_name }}
        bbl print-env
