name: 'Deploy CF'
description: 'Deploy Cloud Foundry with new rootfs from S3 and custom cflinuxfs5 stack'

inputs:
  stack:
    description: 'Stack name (e.g., cflinuxfs5)'
    required: true
  version:
    description: 'Rootfs version number (e.g., 1.0.0-rc.1)'
    required: true
  env_name:
    description: 'Environment name for BBL'
    required: false
    default: 'cflinuxfs5'
  system_domain:
    description: 'CF system domain'
    required: false
    default: 'cflinuxfs5.buildpacks-gcp.ci.cf-app.com'
  bbl_state_repo:
    description: 'Repo for BBL state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch for BBL state'
    required: false
    default: 'main'

outputs:
  success:
    description: 'Whether CF deployment succeeded'
    value: ${{ steps.deploy.outputs.success }}

runs:
  using: 'composite'
  steps:
    # --- Checkout required repos ---
    - uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment
        ref: v21.11.0
        path: cf-deployment

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        path: bbl-state
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}

    - uses: actions/checkout@v4
      with:
        repository: ivo1116/${{ inputs.stack }}-release
        ref: main
        path: ${{ inputs.stack }}-release
        token: ${{ env.CFLINUXFS5_TOKEN }}

    # --- Download rootfs blob from S3 ---
    - name: Download rootfs blob from S3
      shell: bash
      run: |
        mkdir -p rootfs-artifacts
        aws s3 cp s3://cflinuxfs5test/rootfs/${{ inputs.stack }}-${{ inputs.version }}.tar.gz \
          rootfs-artifacts/${{ inputs.stack }}-${{ inputs.version }}.tar.gz
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1

    # --- Install BBL & BOSH ---
    - name: Install BBL & BOSH
      shell: bash
      run: |
        wget -O /tmp/bbl https://github.com/Ivo1116/bosh-bootloader/releases/download/test/bbl-linux
        chmod +x /tmp/bbl && sudo mv /tmp/bbl /usr/local/bin/bbl
        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh && sudo mv /tmp/bosh /usr/local/bin/bosh

    # --- Prepare blobs ---
    - name: Fetch Go blob
      shell: bash
      run: ${{ github.action_path }}/fetch-go.sh ${{ inputs.stack }}

    - name: Fetch rootfs blob
      shell: bash
      run: ${{ github.action_path }}/fetch-rootfs.sh ${{ inputs.stack }} ${{ inputs.version }}

    - name: Register blobs
      shell: bash
      run: ${{ github.action_path }}/register-blobs.sh ${{ inputs.stack }} ${{ inputs.version }}

    # --- Create deployment source config ---
    - name: Create deployment source config
      shell: bash
      run: |
        cd bbl-state/${{ inputs.stack }}
        mkdir -p ../../deployment-source-config
        bbl print-env > ../../deployment-source-config/source_file.yml

    # --- Download & Upload stemcell ---
    - name: Download GCP ubuntu-noble stemcell
      shell: bash
      run: wget -O gcp-stemcell.tgz "https://bosh.io/d/stemcells/bosh-google-kvm-ubuntu-noble?v=1.25"

    - name: Upload stemcell to BOSH
      shell: bash
      run: |
        cd deployment-source-config
        source source_file.yml
        cd ..
        bosh upload-stemcell gcp-stemcell.tgz --non-interactive

    # --- Build & Upload rootfs release ---
    - name: Build and upload rootfs release
      shell: bash
      run: |
        cd ${{ inputs.stack }}-release
        UNIQUE_VERSION="${{ inputs.version }}+dev.$(date +%s)"
        mkdir -p ../rootfs-release-artifacts
        bosh create-release --force --version="$UNIQUE_VERSION" \
          --tarball=../rootfs-release-artifacts/${{ inputs.stack }}-dev-$UNIQUE_VERSION.tgz \
          --timestamp-version
        cd ../deployment-source-config
        source source_file.yml
        bosh upload-release ../rootfs-release-artifacts/${{ inputs.stack }}-dev-$UNIQUE_VERSION.tgz --non-interactive
        echo "unique_version=$UNIQUE_VERSION" >> $GITHUB_ENV

    # --- Download & Upload prebuilt CAPI release ---
    - name: Download CAPI release
      shell: bash
      run: wget -O capi-release.tgz https://bosh.io/d/github.com/cloudfoundry/capi-release?v=1.213.0

    - name: Upload CAPI release to BOSH
      shell: bash
      run: |
        cd deployment-source-config
        source source_file.yml
        cd ..
        bosh upload-release capi-release.tgz --non-interactive

    # --- Create ops files for custom stack ---
    - name: Create ops files
      shell: bash
      run: |
        mkdir -p rootfs-release-artifacts capi-release-artifacts custom-ops
        cat > rootfs-release-artifacts/use-dev-release-opsfile.yml <<EOF
        - type: replace
          path: /releases/name=${{ inputs.stack }}
          value:
            name: ${{ inputs.stack }}
            version: ${unique_version}
        EOF
        cat > capi-release-artifacts/use-prebuilt-capi.yml <<EOF
        - type: replace
          path: /releases/name=capi
          value:
            name: capi
            version: 1.213.0
        EOF
        cat > custom-ops/add-${{ inputs.stack }}.yml <<EOF
        - type: replace
          path: /releases/-
          value:
            name: ${{ inputs.stack }}
            version: ${unique_version}
        EOF
        cat > custom-ops/set-${{ inputs.stack }}-default-stack.yml <<EOF
        - type: replace
          path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/stacks/-
          value:
            name: ${{ inputs.stack }}
            description: Cloud Foundry Linux FS 5
            build_rootfs: ${{ inputs.stack }}
            run_rootfs: ${{ inputs.stack }}
            default: true
        EOF

    - name: Deploy CF
      id: deploy
      shell: bash
      run: |
        cd deployment-source-config
        source source_file.yml
        bosh -d cf deploy ../cf-deployment/cf-deployment.yml \
          --ops-file ../cf-deployment/operations/experimental/fast-deploy-with-downtime-and-danger.yml \
          --ops-file ../cf-deployment/operations/use-latest-stemcell.yml \
          --ops-file ../cf-deployment/operations/use-compiled-releases.yml \
          --ops-file ../custom-ops/add-${{ inputs.stack }}.yml \
          --ops-file ../custom-ops/set-${{ inputs.stack }}-default-stack.yml \
          --ops-file ../rootfs-release-artifacts/use-dev-release-opsfile.yml \
          --ops-file ../capi-release-artifacts/use-prebuilt-capi.yml \
          --var system_domain='${{ inputs.system_domain }}' \
          --vars-store cf-vars.yml
        echo "success=true" >> $GITHUB_OUTPUT

    - name: Smoke test new stack
      if: steps.deploy.outputs.success == 'true'
      shell: bash
      run: |
        cd deployment-source-config
        source source_file.yml
        cf api https://${{ inputs.system_domain }} --skip-ssl-validation
        cf auth admin $(bosh int cf-vars.yml --path /admin_password)
        cf create-org test-org
        cf target -o test-org
        cf create-space test-space
        cf target -s test-space
        git clone https://github.com/cloudfoundry-samples/cf-sample-app-nodejs app
        cd app
        cf push test-app -b nodejs_buildpack -s ${{ inputs.stack }}
        cf apps
