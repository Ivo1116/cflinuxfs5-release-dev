name: 'Deploy CF'
description: 'Deploy Cloud Foundry with new rootfs'

inputs:
  stack:
    description: 'Stack name'
    required: true
  version:
    description: 'Version number'
    required: true
  env_name:
    description: 'Environment name'
    required: false
    default: 'cflinuxfs5'
  system_domain:
    description: 'System domain'
    required: false
    default: 'cflinuxfs5.buildpacks-gcp.ci.cf-app.com'
  bbl_state_repo:
    description: 'Repo for BBL state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch for BBL state'
    required: false
    default: 'main'

outputs:
  success:
    description: 'Whether CF deployment succeeded'
    value: ${{ steps.deploy.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Checkout cf-deployment
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-deployment
        ref: v21.11.0
        path: cf-deployment

    - name: Checkout buildpacks-ci
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/buildpacks-ci
        ref: master
        path: buildpacks-ci

    - name: Checkout rootfs release
      uses: actions/checkout@v4
      with:
        repository: ivo1116/${{ inputs.stack }}-release
        ref: main
        path: ${{ inputs.stack }}-release
        token: ${{ env.CFLINUXFS5_TOKEN }}

    - name: Checkout CAPI release
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/capi-release
        ref: main
        path: capi-release
        submodules: recursive

    - name: Checkout BBL state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        path: bbl-state
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}

    - name: Download rootfs from S3
      uses: ./.github/actions/download-s3
      with:
        stack: ${{ inputs.stack }}
        version: ${{ inputs.version }}
        bucket-name: cflinuxfs5test
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}

    - name: Prepare blobs
      shell: bash
      run: |
        cd ${{ inputs.stack }}-release
        mkdir -p blobs/golang-1-linux blobs/rootfs
        cp ../rootfs-artifacts/${{ inputs.stack }}-${{ inputs.version }}.tar.gz \
           blobs/rootfs/${{ inputs.stack }}-${{ inputs.version }}.tar.gz

        # Get latest stable Go version from official API
        LATEST_GO_URL=$(curl -s https://go.dev/dl/?mode=json | \
          jq -r '.[] | select(.stable == true) | .files[] | select(.os == "linux" and .arch == "amd64" and .kind == "archive") | .version + " " + .filename' | \
          head -n 1 | \
          awk '{print "https://go.dev/dl/"$2}')

        if [[ -z "$LATEST_GO_URL" ]]; then
          echo "WARNING: Could not detect latest Go version, falling back to 1.21.8"
          LATEST_GO_URL="https://go.dev/dl/go1.21.8.linux-amd64.tar.gz"
        fi

        GO_FILENAME=$(basename "$LATEST_GO_URL")
        echo "Downloading Go from $LATEST_GO_URL ..."

        # Retry download up to 3 times
        for i in 1 2 3; do
          if curl -L --fail -o "blobs/golang-1-linux/$GO_FILENAME" "$LATEST_GO_URL"; then
            break
          fi
          echo "Download failed (attempt $i), retrying in 5s..."
          sleep 5
        done

        if [[ ! -f "blobs/golang-1-linux/$GO_FILENAME" ]]; then
          echo "ERROR: Failed to download Go after 3 attempts"
          exit 1
        fi

    - name: Update golang packaging script
      shell: bash
      run: |
        cd ${{ inputs.stack }}-release
        cat > packages/golang-1-linux/packaging <<'EOF'
        #!/bin/bash
        set -euo pipefail
        BLOB_PATH=""
        if [[ -n "$(find . -maxdepth 1 -name '*.tar.gz' | head -n 1)" ]]; then
          BLOB_PATH=$(find . -maxdepth 1 -name '*.tar.gz' | head -n 1)
        elif [[ -n "$(find ./../../blobs/golang-1-linux/ -type f -name '*.tar.gz' 2>/dev/null | head -n 1)" ]]; then
          BLOB_PATH=$(find ./../../blobs/golang-1-linux/ -type f -name '*.tar.gz' | head -n 1)
        fi
        if [[ -z "$BLOB_PATH" ]]; then
          echo "ERROR: No golang blob found"
          exit 1
        fi
        tar -C /var/vcap/packages/golang-1-linux -xzf "$BLOB_PATH"
        EOF
        chmod +x packages/golang-1-linux/packaging
        rm -rf .dev_builds/ .final_builds/ .blobs_cache/ releases/ || true
        find packages/ -name "spec.lock" -delete || true

    - name: Install BBL & bosh
      shell: bash
      run: |
        wget -O /tmp/bbl https://github.com/Ivo1116/bosh-bootloader/releases/download/test/bbl-linux
        chmod +x /tmp/bbl && sudo mv /tmp/bbl /usr/local/bin/bbl
        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh && sudo mv /tmp/bosh /usr/local/bin/bosh

    - name: Create deployment source config
      shell: bash
      run: |
        cd bbl-state
        cd ${{ inputs.stack }}
        mkdir -p ../../deployment-source-config
        bbl print-env > ../../deployment-source-config/source_file.yml

    - name: Build and upload rootfs release
      shell: bash
      run: |
        cd ${{ inputs.stack }}-release
        UNIQUE_VERSION="0+dev.$(date +%s)"
        bosh create-release --force --version="$UNIQUE_VERSION" \
          --tarball=../rootfs-release-artifacts/${{ inputs.stack }}-dev-$UNIQUE_VERSION.tgz
        cd ../deployment-source-config
        source source_file.yml
        bosh upload-release ../rootfs-release-artifacts/${{ inputs.stack }}-dev-$UNIQUE_VERSION.tgz --non-interactive
        echo "unique_version=$UNIQUE_VERSION" >> $GITHUB_ENV

    - name: Copy smoke test manifest
      shell: bash
      run: |
        mkdir -p rootfs-release-artifacts/manifests
        cp ${{ inputs.stack }}-release/manifests/manifest.yml rootfs-release-artifacts/manifests/manifest.yml
        sed -i "s/version: .*/version: ${unique_version}/" rootfs-release-artifacts/manifests/manifest.yml

    - name: Deploy rootfs smoke test
      shell: bash
      run: |
        cd deployment-source-config
        source source_file.yml
        bosh -d rootfs-smoke-test deploy \
          ../rootfs-release-artifacts/manifests/manifest.yml \
          --vars-store smoke-test-vars.yml \
          --non-interactive

    - name: Run rootfs smoke test
      shell: bash
      run: |
        cd deployment-source-config
        source source_file.yml
        cd ..
        bosh -d rootfs-smoke-test run-errand smoke-tests

    - name: Create CAPI release
      shell: bash
      run: |
        cd capi-release
        bosh create-release --force --tarball=../capi-release-artifacts/capi-dev.tgz
        cd ../deployment-source-config
        source source_file.yml
        bosh upload-release ../capi-release-artifacts/capi-dev.tgz --non-interactive

    - name: Create ops files
      shell: bash
      run: |
        mkdir -p rootfs-release-artifacts capi-release-artifacts
        cat > rootfs-release-artifacts/use-dev-release-opsfile.yml <<EOF
        - type: replace
          path: /releases/-
          value:
            name: ${{ inputs.stack }}
            version: ${unique_version}
        EOF
        cat > capi-release-artifacts/use-dev-release-opsfile.yml <<EOF
        - type: replace
          path: /releases/-
          value:
            name: capi
            version: 1.213.0+dev.1
        EOF

    - name: Deploy CF
      id: deploy
      shell: bash
      run: |
        cd deployment-source-config
        source source_file.yml
        bosh -d cf deploy ../cf-deployment/cf-deployment.yml \
          --ops-file ../cf-deployment/operations/experimental/fast-deploy-with-downtime-and-danger.yml \
          --ops-file ../cf-deployment/operations/use-latest-stemcell.yml \
          --ops-file ../cf-deployment/operations/use-compiled-releases.yml \
          --ops-file ../cf-deployment/operations/experimental/add-${{ inputs.stack }}.yml \
          --ops-file ../cf-deployment/operations/experimental/set-${{ inputs.stack }}-default-stack.yml \
          --ops-file ../rootfs-release-artifacts/use-dev-release-opsfile.yml \
          --ops-file ../capi-release-artifacts/use-dev-release-opsfile.yml \
          --var system_domain='${{ inputs.system_domain }}' \
          --vars-store cf-vars.yml
        echo "success=true" >> $GITHUB_OUTPUT
