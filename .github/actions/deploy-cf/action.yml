name: Deploy CF with cflinuxfs5
description: Deploy Cloud Foundry to a bbl environment using the cflinuxfs5 stack
inputs:
  env_name:
    description: bbl environment name (state dir under the bbl-state repo)
    required: true
  version:
    description: cflinuxfs5 version (e.g., 1.0.0-rc.1)
    required: true
  bbl_state_repo:
    description: Repo holding bbl state (owner/repo)
    required: true
  bbl_state_branch:
    description: Branch of the bbl state repo
    required: true
    default: main
  system_domain:
    description: Overrides default "<env_name>.buildpacks-gcp.ci.cf-app.com"
    required: false
    default: ""
outputs:
  success:
    description: true if deploy completed successfully
    value: ${{ steps.done.outputs.success }}
runs:
  using: composite
  steps:
    - name: Compute config
      id: cfg
      shell: bash
      run: |
        set -euo pipefail
        # Constants (change here if your bucket or repos move)
        echo "rootfs_bucket=cflinuxfs5test" >> "$GITHUB_OUTPUT"
        echo "rootfs_prefix=rootfs" >> "$GITHUB_OUTPUT"
        echo "release_repo=ivo1116/cflinuxfs5-release" >> "$GITHUB_OUTPUT"
        echo "release_ref=main" >> "$GITHUB_OUTPUT"
        echo "cf_repo=cloudfoundry/cf-deployment" >> "$GITHUB_OUTPUT"
        echo "cf_ref=main" >> "$GITHUB_OUTPUT"

        if [[ -n "${{ inputs.system_domain }}" ]]; then
          DOMAIN="${{ inputs.system_domain }}"
        else
          DOMAIN="${{ inputs.env_name }}.buildpacks-gcp.ci.cf-app.com"
        fi
        echo "system_domain=${DOMAIN}" >> "$GITHUB_OUTPUT"

        # State dir equals env_name (as created by your bbl-up action)
        echo "bbl_dir=${{ inputs.env_name }}" >> "$GITHUB_OUTPUT"

    - name: Checkout bbl state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}
        path: bbl-state

    - name: Checkout cf-deployment
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.cfg.outputs.cf_repo }}
        ref: ${{ steps.cfg.outputs.cf_ref }}
        path: cf-deployment

    - name: Setup tools (bosh, bbl, awscli, jq, yq)
      shell: bash
      run: |
        set -euo pipefail
        sudo apt-get update
        sudo apt-get install -y jq unzip curl python3-pip
        pip3 install --user awscli
        echo "${HOME}/.local/bin" >> "$GITHUB_PATH"

        BOSH_VERSION="7.6.2"
        curl -L \
          "https://github.com/cloudfoundry/bosh-cli/releases/download/v${BOSH_VERSION}/bosh-cli-${BOSH_VERSION}-linux-amd64" \
          -o bosh
        sudo install -m 0755 bosh /usr/local/bin/bosh

        BBL_VERSION="$(curl -s \
          https://api.github.com/repos/cloudfoundry/bosh-bootloader/releases/latest \
          | jq -r .tag_name | sed 's/^v//')"
        curl -L \
          "https://github.com/cloudfoundry/bosh-bootloader/releases/download/v${BBL_VERSION}/bbl-v${BBL_VERSION}_linux_x86-64" \
          -o bbl
        sudo install -m 0755 bbl /usr/local/bin/bbl

        YQ_VERSION="4.44.3"
        curl -L \
          "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64" \
          -o yq
        sudo install -m 0755 yq /usr/local/bin/yq

    - name: Set BOSH env via bbl
      shell: bash
      env:
        GCP_SERVICE_ACCOUNT_KEY: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}
      run: |
        set -euo pipefail
        pushd "bbl-state/${{ steps.cfg.outputs.bbl_dir }}" >/dev/null
          if [[ -n "${GCP_SERVICE_ACCOUNT_KEY:-}" ]]; then
            mkdir -p "${HOME}/.gcp"
            echo "${GCP_SERVICE_ACCOUNT_KEY}" > "${HOME}/.gcp/key.json"
            export GOOGLE_CREDENTIALS="${HOME}/.gcp/key.json"
          fi
          eval "$(bbl print-env)"
        popd >/dev/null
        bosh env

    - name: Delete existing CF (ignore errors)
      shell: bash
      run: |
        set -euo pipefail
        bosh -d cf delete-deployment --force || true

    - name: Prepare workspace
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p work
        echo "${{ inputs.version }}" > work/version.txt

    - name: Download rootfs tarball from S3
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
      run: |
        set -euo pipefail
        VERSION="${{ inputs.version }}"
        BUCKET="${{ steps.cfg.outputs.rootfs_bucket }}"
        PREFIX="${{ steps.cfg.outputs.rootfs_prefix }}"
        SRC="s3://${BUCKET}/${PREFIX}/cflinuxfs5-${VERSION}.tar.gz"
        echo "Downloading ${SRC}"
        aws s3 cp "${SRC}" "work/cflinuxfs5-${VERSION}.tar.gz"

    - name: Clone cflinuxfs5-release
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.cfg.outputs.release_repo }}
        ref: ${{ steps.cfg.outputs.release_ref }}
        path: work/cflinuxfs5-release
        token: ${{ env.CFLINUXFS5_TOKEN }}

    - name: Add rootfs tarball as blob (auto-detect path from packages/*/spec)
      id: addblob
      shell: bash
      run: |
        set -euo pipefail
        VERSION="${{ inputs.version }}"
        REL="work/cflinuxfs5-release"

        mapfile -t SPECS < <(find "${REL}/packages" -type f -name spec)
        if [[ ${#SPECS[@]} -eq 0 ]]; then
          echo "No package spec files found in ${REL}/packages"
          exit 1
        fi

        DECL_PATH=""
        for spec in "${SPECS[@]}"; do
          if yq -r '.files[]? // empty' "$spec" \
            | grep -Eq 'cflinuxfs5-.*\.tar\.gz'; then
            DECL_PATH="$(yq -r '.files[]? // empty' "$spec" \
              | grep -E 'cflinuxfs5-.*\.tar\.gz' | head -n1)"
            break
          fi
        done

        if [[ -z "${DECL_PATH}" ]]; then
          echo "Could not find declared cflinuxfs5-*.tar.gz file in any spec"
          exit 1
        fi

        DIR="$(dirname "${DECL_PATH}")"
        if [[ "${DIR}" == "." ]]; then
          BLOB_PATH="cflinuxfs5-${VERSION}.tar.gz"
        else
          BLOB_PATH="${DIR}/cflinuxfs5-${VERSION}.tar.gz"
        fi
        echo "Using blob path: ${BLOB_PATH}"

        pushd "${REL}" >/dev/null
          bosh add-blob "../cflinuxfs5-${VERSION}.tar.gz" "${BLOB_PATH}"
        popd >/dev/null
        echo "blob_path=${BLOB_PATH}" >> "$GITHUB_OUTPUT"

    - name: Create dev BOSH release tarball
      shell: bash
      run: |
        set -euo pipefail
        pushd work/cflinuxfs5-release >/dev/null
          bosh create-release --timestamp-version --force \
            --tarball "../cflinuxfs5-release.tgz"
        popd >/dev/null

    - name: Upload cflinuxfs5 release to BOSH
      shell: bash
      run: |
        set -euo pipefail
        bosh upload-release work/cflinuxfs5-release.tgz

    - name: Prepare cflinuxfs5 ops files (embedded)
      id: opsfiles
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ops/generated

        cat > ops/generated/add-cflinuxfs5.yml <<'EOF'
        ---
        - type: replace
          path: /releases/-
          value:
            name: cflinuxfs5
            version: latest

        - type: replace
          path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/stacks/-
          value:
            name: cflinuxfs5
            description: "Cloud Foundry cflinuxfs5 (Ubuntu 24.04)"

        - type: replace
          path: /instance_groups/name=diego-cell/jobs/-
          value:
            name: cflinuxfs5-rootfs-setup
            release: cflinuxfs5

        - type: replace
          path: /instance_groups/name=diego-cell/jobs/name=containerd/properties/containerd/stacks/-
          value:
            name: cflinuxfs5
            description: "Cloud Foundry cflinuxfs5 (Ubuntu 24.04)"
        EOF

        cat > ops/generated/set-cflinuxfs5-default-stack.yml <<'EOF'
        ---
        - type: replace
          path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/default_stack?
          value: cflinuxfs5
        EOF

        echo "add_op=ops/generated/add-cflinuxfs5.yml" >> "$GITHUB_OUTPUT"
        echo "default_op=ops/generated/set-cflinuxfs5-default-stack.yml" \
          >> "$GITHUB_OUTPUT"

    - name: Deploy CF with cflinuxfs5
      id: deploy
      shell: bash
      run: |
        set -euo pipefail
        DOMAIN="${{ steps.cfg.outputs.system_domain }}"
        echo "System domain: ${DOMAIN}"

        bosh -n -d cf deploy cf-deployment/cf-deployment.yml \
          -o cf-deployment/operations/experimental/fast-deploy-with-downtime-and-danger.yml \
          -o cf-deployment/operations/use-compiled-releases.yml \
          -o cf-deployment/operations/use-postgres.yml \
          -o cf-deployment/operations/use-latest-stemcell.yml \
          -o "${{ steps.opsfiles.outputs.add_op }}" \
          -o "${{ steps.opsfiles.outputs.default_op }}" \
          -v system_domain="${DOMAIN}"

    - name: Mark success
      id: done
      if: ${{ success() }}
      shell: bash
      run: |
        echo "success=true" >> "$GITHUB_OUTPUT"
