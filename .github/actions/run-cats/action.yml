name: 'Run CATs'
description: 'Run Cloud Foundry Acceptance Tests (CATS)'

inputs:
  bbl_state_repo:
    description: 'Repo holding bbl state (owner/repo)'
    required: true
  bbl_state_branch:
    description: 'Branch of the bbl state repo'
    required: true
    default: main
  env_name:
    description: 'bbl environment name (state dir under the bbl-state repo)'
    required: true
  system_domain:
    description: 'CF system domain (e.g. test.com)'
    required: true
  nodes:
    description: 'Number of parallel test nodes'
    required: false
    default: '4'
  skip_regexp:
    description: 'Regex of tests to skip'
    required: false
    default: ''
  flake_attempts:
    description: 'Retries for flaky tests'
    required: false
    default: '2'
  timeout:
    description: 'Test timeout (e.g. 2h)'
    required: false
    default: '2h'

outputs:
  success:
    description: 'Whether CATs passed'
    value: ${{ steps.cats.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Checkout CF Acceptance Tests
      uses: actions/checkout@v4
      with:
        repository: cloudfoundry/cf-acceptance-tests
        ref: develop
        path: cf-acceptance-tests

    - name: Checkout bbl state repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.bbl_state_repo }}
        ref: ${{ inputs.bbl_state_branch }}
        ssh-key: ${{ env.BBL_STATE_DEPLOY_KEY }}
        path: bbl-state

    - name: Setup tools (bosh, bbl, credhub)
      shell: bash
      run: |
        set -euo pipefail
        wget -O /tmp/bbl https://github.com/cloudfoundry/bosh-bootloader/releases/download/v9.0.36/bbl-v9.0.36_linux_amd64
        chmod +x /tmp/bbl
        sudo mv /tmp/bbl /usr/local/bin/bbl

        wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.4.0/bosh-cli-7.4.0-linux-amd64
        chmod +x /tmp/bosh
        sudo mv /tmp/bosh /usr/local/bin/bosh

        wget -qO /tmp/credhub.tgz https://github.com/cloudfoundry/credhub-cli/releases/download/2.9.49/credhub-linux-amd64-2.9.49.tgz
        mkdir -p /tmp/credhub-extract
        tar --no-same-owner --no-same-permissions -xzf /tmp/credhub.tgz -C /tmp/credhub-extract
        sudo mv /tmp/credhub-extract/credhub /usr/local/bin/credhub

    - name: Extract CF admin password from CredHub
      id: creds
      shell: bash
      run: |
        set -euo pipefail
        BBL_STATE_DIR="bbl-state/${{ inputs.env_name }}"
        eval "$(bbl print-env --state-dir $BBL_STATE_DIR)"

        credhub api --ca-cert <(echo "$CREDHUB_CA_CERT") "$CREDHUB_SERVER"
        credhub login --client-name=credhub-admin --client-secret="$CREDHUB_ADMIN_CLIENT_SECRET"

        ADMIN_PASS=$(credhub get -n "/bosh-${{ inputs.env_name }}/cf/admin_password" -q)

        echo "admin_password=$ADMIN_PASS" >> $GITHUB_OUTPUT

    - name: Create CATS config
      id: config
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_FILE=$(mktemp)
        cat > $CONFIG_FILE <<EOF
        {
          "api": "api.${{ inputs.system_domain }}",
          "apps_domain": "${{ inputs.system_domain }}",
          "admin_user": "admin",
          "admin_password": "${{ steps.creds.outputs.admin_password }}",
          "skip_ssl_validation": true,
          "use_http": false,
          "include_apps": true,
          "include_backend_compatibility": true,
          "include_container_networking": true,
          "include_detect": true,
          "include_docker": false,
          "include_internet_dependent": true,
          "include_routing": true,
          "include_security_groups": true,
          "include_services": true,
          "include_ssh": true,
          "include_tasks": true
        }
        EOF
        echo "config=$CONFIG_FILE" >> $GITHUB_OUTPUT

    - name: Run CATs
      id: cats
      shell: bash
      run: |
        set -euo pipefail
        cd cf-acceptance-tests
        export CONFIG=${{ steps.config.outputs.config }}
        export CF_DIAL_TIMEOUT=11

        ./bin/test \
          --keep-going \
          --randomize-all \
          --skip-package=helpers \
          --nodes="${{ inputs.nodes }}" \
          --skip="${{ inputs.skip_regexp }}" \
          --flake-attempts=${{ inputs.flake_attempts }} \
          --timeout="${{ inputs.timeout }}" \
          --no-color

        echo "success=true" >> "$GITHUB_OUTPUT"
