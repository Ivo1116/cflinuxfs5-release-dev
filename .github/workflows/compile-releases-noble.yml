name: Compile CF Releases for Noble

on:
  workflow_dispatch:

jobs:
  compile-and-upload:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      GITHUB_TOKEN: ${{ secrets.CFLINUXFS5_TOKEN }}
      BBL_STATE_DEPLOY_KEY: ${{ secrets.BBL_STATE_DEPLOY_KEY }}

    steps:
      # --- Checkout cf-deployment ---
      - uses: actions/checkout@v4
        with:
          repository: cloudfoundry/cf-deployment
          ref: main
          path: cf-deployment

      # --- Checkout BBL state ---
      - uses: actions/checkout@v4
        with:
          repository: ivo1116/buildpacks-envs
          ref: main
          path: bbl-state
          ssh-key: ${{ secrets.BBL_STATE_DEPLOY_KEY }}

      # --- Install BBL & BOSH ---
      - name: Install BBL & BOSH
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget -O /tmp/bbl https://github.com/cloudfoundry/bosh-bootloader/releases/download/v9.0.0/bbl-v9.0.0_linux_x86-64
          chmod +x /tmp/bbl && sudo mv /tmp/bbl /usr/local/bin/bbl
          wget -O /tmp/bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.5.3/bosh-cli-7.5.3-linux-amd64
          chmod +x /tmp/bosh && sudo mv /tmp/bosh /usr/local/bin/bosh

      # --- Setup BOSH env ---
      - name: Setup BOSH env
        shell: bash
        run: |
          cd bbl-state/cflinuxfs5
          mkdir -p ../../deployment-source-config
          bbl print-env > ../../deployment-source-config/source_file.yml

      # --- Install Ruby & Bundler ---
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-full build-essential libssl-dev zlib1g-dev libpq-dev
          sudo gem install bundler --no-document

      # --- Upload Noble stemcell ---
      - name: Upload Noble stemcell
        shell: bash
        run: |
          wget -O gcp-stemcell.tgz "https://bosh.io/d/stemcells/bosh-google-kvm-ubuntu-noble?v=1.25"
          cd deployment-source-config
          source source_file.yml
          cd ..
          bosh upload-stemcell gcp-stemcell.tgz --non-interactive

      # --- Compile and upload all releases ---
      - name: Compile and upload releases
        shell: bash
        run: |
          set -e
          cd deployment-source-config
          source source_file.yml
          cd ..

          RELEASES=(
            "bpm-release"
            "capi-release"
            "bosh-package-cf-cli-release"
            "cf-networking-release"
            "credhub-release"
            "diego-release"
            "garden-runc-release"
            "log-cache-release"
            "loggregator-release"
            "nats-release"
            "routing-release"
            "silk-release"
            "statsd-injector-release"
            "syslog-release"
            "uaa-release"
          )

          WORKSPACE=$(pwd)
          S3_BUCKET="cflinuxfs5test/noble-releases"

          # Ensure S3 bucket exists
          aws s3 mb s3://$(echo $S3_BUCKET | cut -d/ -f1) --region $AWS_REGION || true

          # Actual repo names from your list
          RELEASES=(
            "bpm-release"
            "capi-release"
            "cf-networking-release"
            "diego-release"
            "garden-runc-release"
            "log-cache-release"
            "loggregator-release"
            "nats-release"
            "routing-release"
            "silk-release"
            "statsd-injector-release"
            "syslog-release"
          )

          # Manifest file for compiled releases
          COMPILED_LIST="$WORKSPACE/compiled-releases-list.txt"
          > "$COMPILED_LIST"

          for rel in "${RELEASES[@]}"; do
            echo "=== Building $rel for Noble ==="

            # Skip binary/Java-only releases
            if [[ "$rel" == "bosh-package-cf-cli-release" || "$rel" == "uaa-release" ]]; then
              echo "Skipping $rel — binary/Java-only, no Noble compilation needed"
              continue
            fi

            # Map org for special cases
            case "$rel" in
              credhub-release)
                ORG="pivotal"
                ;;
              *)
                ORG="cloudfoundry"
                ;;
            esac

            # Clone repo with submodules
            git clone --recursive https://$GITHUB_TOKEN@github.com/$ORG/$rel.git
            cd $rel
            git submodule update --init --recursive

            # Create dev release tarball
            UNIQUE_VERSION="dev.$(date +%s)"
            DEV_TGZ="$WORKSPACE/${rel}-${UNIQUE_VERSION}.tgz"
            bosh create-release --force --version="$UNIQUE_VERSION" --tarball="$DEV_TGZ"

            # Extract release name and version from tarball
            REL_NAME=$(bosh int <(tar -xOf "$DEV_TGZ" release.MF) --path /name)
            REL_VER=$(bosh int <(tar -xOf "$DEV_TGZ" release.MF) --path /version)

            # Detect a job name automatically from the tarball
            JOB_NAME=$(tar -tzf "$DEV_TGZ" | grep '^jobs/' | head -n 1 | cut -d/ -f2)

            # Upload dev release to BOSH
            cd ../deployment-source-config
            source source_file.yml
            cd "$WORKSPACE"
            bosh upload-release "$DEV_TGZ" --non-interactive

            if [[ -z "$JOB_NAME" ]]; then
              echo "No jobs found in $REL_NAME — skipping dummy deployment and export"
              S3_PATH="s3://$S3_BUCKET/$rel/$(basename "$DEV_TGZ")"
              aws s3 cp "$DEV_TGZ" "$S3_PATH"
              echo "$REL_NAME $S3_PATH" >> "$COMPILED_LIST"
              rm -rf "$WORKSPACE/$rel" "$DEV_TGZ"
              continue
            fi

            echo "Using job '$JOB_NAME' for dummy manifest"

            # Create dummy manifest to trigger compilation
            cat > dummy-manifest.yml <<EOF
          ---
          name: compile-$REL_NAME
          releases:
          - name: $REL_NAME
            version: $REL_VER
          stemcells:
          - alias: default
            os: ubuntu-noble
            version: "1.25"
          instance_groups:
          - name: dummy
            azs: [z1]
            instances: 1
            jobs:
            - name: $JOB_NAME
              release: $REL_NAME
            vm_type: default
            stemcell: default
            networks:
            - name: default
          EOF

            # Deploy dummy to trigger compilation
            bosh -n -d compile-$REL_NAME deploy dummy-manifest.yml

            # Export compiled release for Noble stemcell
            bosh export-release "$REL_NAME/$REL_VER" ubuntu-noble/1.25 --dir "$WORKSPACE/compiled-releases"

            # Delete dummy deployment
            bosh -n -d compile-$REL_NAME delete-deployment

            # Upload compiled release to S3 and record it
            for file in "$WORKSPACE"/compiled-releases/*.tgz; do
              S3_PATH="s3://$S3_BUCKET/$rel/$(basename "$file")"
              aws s3 cp "$file" "$S3_PATH"
              echo "$REL_NAME $S3_PATH" >> "$COMPILED_LIST"
            done

            # Cleanup
            rm -rf "$WORKSPACE/$rel" "$WORKSPACE/compiled-releases" "$DEV_TGZ" dummy-manifest.yml
          done

          # Print compiled releases list
          echo "=== Compiled Noble Releases in S3 ==="
          cat "$COMPILED_LIST"

          # Generate Noble compiled releases ops file
          OPS_FILE="$WORKSPACE/use-compiled-releases-noble.yml"
          > "$OPS_FILE"

          while read -r rel_name s3_path; do
            # Extract version from filename
            file_name=$(basename "$s3_path")
            version=$(echo "$file_name" | sed -E 's/.*-dev\.([0-9]+)\.tgz/dev.\1/')

            # Get sha1 from S3
            tmp_file=$(mktemp)
            aws s3 cp "$s3_path" "$tmp_file" >/dev/null
            sha1=$(sha1sum "$tmp_file" | awk '{print $1}')
            rm "$tmp_file"

            cat >> "$OPS_FILE" <<EOF
          - type: replace
            path: /releases/name=$rel_name
            value:
              name: $rel_name
              version: $version
              url: $s3_path
              sha1: $sha1
          EOF
          done < "$COMPILED_LIST"

          echo "=== Noble compiled releases ops file generated: $OPS_FILE ==="
          cat "$OPS_FILE"
