name: Build Rootfs

on:
  workflow_dispatch:
    inputs:
      trigger_reason:
        description: 'Reason for triggering build'
        required: false
        default: 'Manual trigger'
  schedule:
    # Daily at 14:32 UTC (equivalent to original 9:32 AM EST)
    - cron: '32 14 * * *'
  # Add repository dispatch for external triggers
  repository_dispatch:
    types: [cve-update, golang-update, rootfs-change]

jobs:
  check-new-cves:
    name: Check for New CVEs
    runs-on: ubuntu-latest
    outputs:
      cves_detected: ${{ steps.cve-check.outputs.changes_detected }}
      cves_updated: ${{ steps.cve-check.outputs.cves_updated }}
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Checkout buildpacks-ci
        uses: actions/checkout@v4
        with:
          repository: ivo1116/buildpacks-ci
          ref: master
          path: buildpacks-ci

      - name: Checkout cflinuxfs5
        uses: actions/checkout@v4
        with:
          repository: plamen-bardarov/cflinuxfs5
          ref: main
          path: rootfs
          token: ${{ secrets.CFLINUXFS5_TOKEN }}

      - name: Checkout CVEs repository
        uses: actions/checkout@v4
        with:
          repository: cloudfoundry/public-buildpacks-ci-robots
          ref: main
          path: new-cves
          token: ${{ secrets.CFLINUXFS5_TOKEN }}

      - name: Check for new CVEs
        id: cve-check
        uses: ./.github/actions/check-rootfs-cves
        with:
          stack: cflinuxfs5
          ubuntu_version: 'Ubuntu 24.04'
          ubuntu_codename: 'ubuntu24.04'
          buildpacks_ci_path: buildpacks-ci
          rootfs_path: rootfs
          cves_repo_path: new-cves

  bump-golang-package:
    name: Bump Golang Package
    runs-on: ubuntu-latest
    outputs:
      golang_updated: ${{ steps.golang-bump.outputs.changes_detected }}
    steps:
      - name: Checkout self
        uses: actions/checkout@v4
        
      - name: Bump Golang Package
        id: golang-bump
        uses: ./.github/actions/bump-golang-package
        with:
          git_user_name: "cflinuxfs5-bot"
          git_user_email: "cflinuxfs5-bot@test.com"
          packages: '["golang-1-linux"]'
          private_yml: |
            blobstore:
              provider: s3
              options:
                bucket_name: cflinuxfs5test
                access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          cflinuxfs_release_repo: ivo1116/cflinuxfs5-release
          cflinuxfs_release_ref: main
          golang_release_repo: cloudfoundry/bosh-package-golang-release
          golang_release_ref: main
          github_token: ${{ secrets.CFLINUXFS5_TOKEN }}

  determine-build-needed:
    name: Determine if Build is Needed
    needs: [check-new-cves, bump-golang-package]
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.decide.outputs.should_build }}
      trigger_reason: ${{ steps.decide.outputs.reason }}
    steps:
      - name: Decide if build is needed
        id: decide
        run: |
          reasons=()
          
          if [[ "${{ needs.check-new-cves.outputs.cves_detected }}" == "true" ]]; then
            reasons+=("New CVEs detected")
          fi
          
          if [[ "${{ needs.bump-golang-package.outputs.golang_updated }}" == "true" ]]; then
            reasons+=("Golang packages updated")
          fi
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            reasons+=("Manual trigger: ${{ github.event.inputs.trigger_reason || 'Manual trigger' }}")
          fi
          
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            reasons+=("Repository dispatch: ${{ github.event.action }}")
          fi
          
          if [[ ${#reasons[@]} -gt 0 ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            # Join reasons array with ", "
            IFS=", "
            echo "reason=${reasons[*]}" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "reason=No build trigger conditions met" >> $GITHUB_OUTPUT
          fi

  gather-resources:
    name: Gather Resources
    needs: [check-new-cves, bump-golang-package, determine-build-needed]
    runs-on: ubuntu-latest
    if: needs.determine-build-needed.outputs.should_build == 'true'
    outputs:
      previous-version: ${{ steps.previous-release.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Log build reason
        run: |
          echo "Build triggered: ${{ needs.determine-build-needed.outputs.trigger_reason }}"
          if [[ "${{ needs.check-new-cves.outputs.cves_detected }}" == "true" ]]; then
            echo "New CVEs were detected and processed"
          fi
          if [[ "${{ needs.bump-golang-package.outputs.golang_updated }}" == "true" ]]; then
            echo "Golang packages were updated"
          fi

      - name: Get previous rootfs release
        id: previous-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CFLINUXFS5_TOKEN }}
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: 'cloudfoundry',
              repo: 'cflinuxfs5',
              per_page: 1
            });
            const previousTag = releases.length > 0 ? releases[0].tag_name : '';
            core.setOutput('tag', previousTag);

      - name: Generate version
        id: version
        run: |
          PREVIOUS="${{ steps.previous-release.outputs.tag }}"
          PREVIOUS=${PREVIOUS#v}
          
          if [[ -z "$PREVIOUS" ]]; then
            VERSION="1.0.0-rc.1"
          elif [[ "$PREVIOUS" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-rc\.([0-9]+)$ ]]; then
            BASE_VERSION="${BASH_REMATCH[1]}"
            RC_NUMBER="${BASH_REMATCH[2]}"
            NEW_RC_NUMBER=$((RC_NUMBER + 1))
            VERSION="${BASE_VERSION}-rc.${NEW_RC_NUMBER}"
          elif [[ "$PREVIOUS" =~ ^([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            IFS='.' read -r major minor patch <<< "$PREVIOUS"
            new_patch=$((patch + 1))
            VERSION="${major}.${minor}.${new_patch}-rc.1"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Show version output
        run: echo "The version is ${{ steps.version.outputs.version }}"

  build-and-process:
    name: Build and Process Rootfs
    needs: [determine-build-needed, gather-resources]
    runs-on: ubuntu-latest
    if: needs.determine-build-needed.outputs.should_build == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CFLINUXFS5_TOKEN: ${{ secrets.CFLINUXFS5_TOKEN }}
      PUBLIC_ROBOTS_TOKEN: ${{ secrets.PUBLIC_ROBOTS_TOKEN }}
    steps:
      - name: Checkout self
        uses: actions/checkout@v4
      
      - name: Checkout buildpacks-ci
        uses: actions/checkout@v4
        with:
          repository: cloudfoundry/buildpacks-ci
          ref: master
          path: buildpacks-ci
          
      - name: Checkout cflinuxfs5
        uses: actions/checkout@v4
        with:
          repository: plamen-bardarov/cflinuxfs5
          ref: main
          path: cflinuxfs5
          token: ${{ secrets.CFLINUXFS5_TOKEN }}

      - name: Make rootfs
        uses: ./.github/actions/make-rootfs
        with:
          stack: cflinuxfs5
          version: ${{ needs.gather-resources.outputs.version }}
          privileged: true

      - name: Generate receipt diff
        uses: ./.github/actions/generate-receipt-diff
        with:
          stack: cflinuxfs5
          version: ${{ needs.gather-resources.outputs.version }}
          previous-version: ${{ needs.gather-resources.outputs.previous-version }}

      - name: Build cflinuxfs5 BOSH release
        uses: ./.github/actions/make-bosh-release
        with:
          stack: cflinuxfs5
          version: ${{ needs.gather-resources.outputs.version }}
          release-repo: ivo1116/cflinuxfs5-release
          go-version: 1.24.6

      - name: Upload stack to S3
        uses: ./.github/actions/upload-s3
        with:
          upload-type: stack-s3
          version: ${{ needs.gather-resources.outputs.version }}
          bucket-name: cflinuxfs5test

      - name: Upload receipt to S3
        uses: ./.github/actions/upload-s3
        with:
          upload-type: receipt-s3
          version: ${{ needs.gather-resources.outputs.version }}
          bucket-name: cflinuxfs5test

      - name: Upload BOSH release to S3
        uses: ./.github/actions/upload-s3
        with:
          upload-type: release-s3
          version: ${{ needs.gather-resources.outputs.version }}
          bucket-name: cflinuxfs5test
          file: rootfs-artifacts/cflinuxfs5-release-${{ needs.gather-resources.outputs.version }}.tgz

      # Update repositories
      # - name: Update repositories
     #   uses: ./.github/actions/update-repos
     #   with:
     #     version: ${{ needs.gather-resources.outputs.version }}

      # Upload build artifacts to GitHub
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rootfs-build-${{ needs.gather-resources.outputs.version }}
          path: |
            rootfs-artifacts/
            receipt-artifacts/
            public-robots-artifacts/
          retention-days: 30

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [check-new-cves, bump-golang-package, determine-build-needed, gather-resources, build-and-process]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.check-new-cves.outputs.cves_detected }}" == "true" ]]; then
            echo "**CVE Check**: New CVEs detected and processed" >> $GITHUB_STEP_SUMMARY
          else
            echo "**CVE Check**: No new CVEs found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.bump-golang-package.outputs.golang_updated }}" == "true" ]]; then
            echo "**Golang Check**: Golang packages updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Golang Check**: No Golang updates found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.determine-build-needed.outputs.should_build }}" == "true" ]]; then
            echo "**Build**: ${{ needs.determine-build-needed.outputs.trigger_reason }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.gather-resources.result }}" == "success" && "${{ needs.build-and-process.result }}" == "success" ]]; then
              echo "**Result**: Build completed successfully (v${{ needs.gather-resources.outputs.version }})" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Result**: Build failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Build**: Skipped - no trigger conditions met" >> $GITHUB_STEP_SUMMARY
          fi
