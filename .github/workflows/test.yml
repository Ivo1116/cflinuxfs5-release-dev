name: Test Rootfs

on:
  repository_dispatch:
    types: [rootfs-build-completed]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test'
        default: '1.0.0-rc.1'
        required: true
      skip_cleanup:
        description: 'Skip infrastructure cleanup'
        type: boolean
        default: true
      skip_setup:
        description: 'Skip setup test environment'
        type: boolean
        default: true
      skip_deploy:
        description: 'Skip Deploy CF'
        type: boolean
        default: true
      skip_cats: # âœ… NEW
        description: 'Skip Cloud Foundry Acceptance Tests'
        type: boolean
        default: false

jobs:
  resolve-inputs:
    name: Resolve Inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-vars.outputs.version }}
      skip_cleanup: ${{ steps.set-vars.outputs.skip_cleanup }}
      skip_setup: ${{ steps.set-vars.outputs.skip_setup }}
      skip_deploy: ${{ steps.set-vars.outputs.skip_deploy }}
      skip_cats: ${{ steps.set-vars.outputs.skip_cats }}
    steps:
      - name: Normalize inputs
        id: set-vars
        run: |
          echo "version=${{ github.event.client_payload.version || github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "skip_cleanup=${{ github.event.client_payload.skip_cleanup || github.event.inputs.skip_cleanup || 'true' }}" >> $GITHUB_OUTPUT
          echo "skip_setup=${{ github.event.client_payload.skip_setup || github.event.inputs.skip_setup || 'true' }}" >> $GITHUB_OUTPUT
          echo "skip_deploy=${{ github.event.client_payload.skip_deploy || github.event.inputs.skip_deploy || 'true' }}" >> $GITHUB_OUTPUT
          echo "skip_cats=${{ github.event.client_payload.skip_cats || github.event.inputs.skip_cats || 'false' }}" >> $GITHUB_OUTPUT

  setup-test-environment:
    name: Setup Test Environment
    needs: [resolve-inputs]
    runs-on: ubuntu-latest
    if: needs.resolve-inputs.outputs.skip_setup != 'true'
    outputs:
      environment_ready: ${{ steps.bbl-up.outputs.success }}
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Download build artifacts
        if: env.BUILD_RUN_ID != ''
        uses: actions/download-artifact@v4
        with:
          name: rootfs-build-${{ needs.resolve-inputs.outputs.version }}
          github-token: ${{ secrets.CFLINUXFS5_TOKEN }}
          run-id: ${{ env.BUILD_RUN_ID }}

      - name: Setup test environment
        id: bbl-up
        uses: ./.github/actions/bbl-up
        with:
          stack: cflinuxfs5
          version: ${{ needs.resolve-inputs.outputs.version }}
          env_name: cflinuxfs5
          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          bbl_state_repo: ivo1116/buildpacks-envs
          bbl_state_branch: main
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          BBL_STATE_DEPLOY_KEY: ${{ secrets.BBL_STATE_DEPLOY_KEY }}
          CFLINUXFS5_LB_CERT: ${{ secrets.CFLINUXFS5_LB_CERT }}
          CFLINUXFS5_LB_KEY: ${{ secrets.CFLINUXFS5_LB_KEY }}

  deploy-cf:
    name: Deploy CF with New Rootfs
    needs: [setup-test-environment, resolve-inputs]
    runs-on: ubuntu-latest
    if: always() && (needs.resolve-inputs.outputs.skip_deploy != 'true' || needs.setup-test-environment.result == 'success')
    outputs:
      deployment_ready: ${{ steps.deploy.outputs.success }}
      version: ${{ needs.resolve-inputs.outputs.version }}
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Deploy CF
        id: deploy
        uses: ./.github/actions/deploy-cf
        with:
          stack: cflinuxfs5
          env_name: cflinuxfs5
          version: ${{ needs.resolve-inputs.outputs.version }}
          bbl_state_repo: ivo1116/buildpacks-envs
          bbl_state_branch: main
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          BUILDPACKS_ENVS_DEPLOY_KEY: ${{ secrets.BUILDPACKS_ENVS_DEPLOY_KEY }}
          BBL_STATE_DEPLOY_KEY: ${{ secrets.BBL_STATE_DEPLOY_KEY }}
          CFLINUXFS5_TOKEN: ${{ secrets.CFLINUXFS5_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  run-cats:
    name: Run Cloud Foundry Acceptance Tests
    needs: [deploy-cf, resolve-inputs]
    runs-on: ubuntu-latest
    continue-on-error: true
    if: |
      always() && 
      needs.resolve-inputs.outputs.skip_cats != 'true' && (
        needs.resolve-inputs.outputs.skip_deploy == 'true' || 
        needs.deploy-cf.result == 'success'
      )
    outputs:
      cats_passed: ${{ steps.cats.outputs.success }}
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Run CATs
        id: cats
        uses: ./.github/actions/run-cats
        with:
          bbl_state_repo: ivo1116/buildpacks-envs
          bbl_state_branch: main
          go_buildpack_path: https://v96161d7o2.ufs.sh/f/mpjH2zGjR1kP2Krc1zMlz8FK1kCfneWqoL2SRvN46pVutrZi
          system_domain: sisle.org
          env_name: cflinuxfs5
          nodes: 4
          flake_attempts: 3
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          BBL_STATE_DEPLOY_KEY: ${{ secrets.BBL_STATE_DEPLOY_KEY }}
          BUILDPACKS_ENVS_DEPLOY_KEY: ${{ secrets.BUILDPACKS_ENVS_DEPLOY_KEY }}

  check-race-condition:
    name: Check for Race Conditions
    needs: [run-cats, resolve-inputs]
    runs-on: ubuntu-latest
    if: |
      always() && (
        needs.resolve-inputs.outputs.skip_deploy == 'true' ||
        needs.deploy-cf.result == 'success'
      )
    outputs:
      race_check_passed: ${{ steps.race-check.outputs.success }}
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Check for race condition
        id: race-check
        uses: ./.github/actions/check-race-condition
        with:
          stack: cflinuxfs5
          owner: ivo1116
          current_version: ${{ needs.resolve-inputs.outputs.version }}
        env:
          CFLINUXFS5_TOKEN: ${{ secrets.CFLINUXFS5_TOKEN }}

  cleanup-deployments:
    name: Cleanup CF Deployments
    needs: [setup-test-environment, deploy-cf, run-cats, check-race-condition, resolve-inputs]
    runs-on: ubuntu-latest
    if: |
      always() && 
      needs.deploy-cf.result == 'success' &&
      needs.resolve-inputs.outputs.skip_cleanup != 'true'
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Cleanup deployments
        uses: ./.github/actions/cleanup-deployments
        with:
          stack: cflinuxfs5
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          BBL_STATE_DEPLOY_KEY: ${{ secrets.BBL_STATE_DEPLOY_KEY }}

  destroy-test-environment:
    name: Destroy Test Environment
    needs: [setup-test-environment, cleanup-deployments, resolve-inputs]
    runs-on: ubuntu-latest
    if: |
      always() && 
      needs.resolve-inputs.outputs.skip_setup != 'true' &&
      needs.setup-test-environment.result == 'success' && 
      needs.resolve-inputs.outputs.skip_cleanup != 'true'
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Destroy test environment
        uses: ./.github/actions/bbl-destroy
        with:
          env_name: cflinuxfs5-test
          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          bbl_state_repo: ivo1116/buildpacks-envs
          bbl_state_branch: main
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          BBL_STATE_DEPLOY_KEY: ${{ secrets.BBL_STATE_DEPLOY_KEY }}

  trigger-release-workflow:
    name: Trigger Release Workflow
    needs: [run-cats, check-race-condition, resolve-inputs]
    runs-on: ubuntu-latest
    if: |
      always() && 
      needs.check-race-condition.outputs.race_check_passed == 'true' &&
      (
        needs.resolve-inputs.outputs.skip_cats == 'true' ||
        needs.run-cats.outputs.cats_passed == 'true'
      )
    steps:
      - name: Trigger Release Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CFLINUXFS5_TOKEN }}
          event-type: rootfs-tests-completed
          client-payload: |
            {
              "version": "${{ needs.deploy-cf.outputs.version }}",
              "cats_passed": "${{ needs.resolve-inputs.outputs.skip_cats == 'true' && 'skipped' || needs.run-cats.outputs.cats_passed }}"
            }

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [setup-test-environment, resolve-inputs, deploy-cf, run-cats, check-race-condition, cleanup-deployments, destroy-test-environment]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.resolve-inputs.outputs.skip_setup }}" == "true" ]]; then
            echo "**Environment Setup**: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.setup-test-environment.result }}" == "success" ]]; then
            echo "**Environment Setup**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Environment Setup**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-cf.outputs.deployment_ready }}" == "true" ]]; then
            echo "**CF Deployment**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "**CF Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.resolve-inputs.outputs.skip_cats }}" == "true" ]]; then
            echo "**CATs**: Skipped" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.run-cats.outputs.cats_passed }}" == "true" ]]; then
            echo "**CATs**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "**CATs**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.check-race-condition.outputs.race_check_passed }}" == "true" ]]; then
            echo "**Race Condition Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Race Condition Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Tested**: ${{ needs.deploy-cf.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall result
          if [[ "${{ needs.deploy-cf.outputs.deployment_ready }}" == "true" && \
                ( "${{ needs.resolve-inputs.outputs.skip_cats }}" == "true" || "${{ needs.run-cats.outputs.cats_passed }}" == "true" ) && \
                "${{ needs.check-race-condition.outputs.race_check_passed }}" == "true" ]]; then
            echo "**Overall Result**: All tests passed - ready for release" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Overall Result**: Tests failed - release blocked" >> $GITHUB_STEP_SUMMARY
          fi
